// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto-public/pbdataplane/dataplane.proto

package pbdataplane

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DataplaneFeatures int32

const (
	DataplaneFeatures_UNKNOWN                       DataplaneFeatures = 0
	DataplaneFeatures_WATCH_SERVERS                 DataplaneFeatures = 1
	DataplaneFeatures_EDGE_CERTIFICATE_MANAGEMENT   DataplaneFeatures = 2
	DataplaneFeatures_ENVOY_BOOTSTRAP_CONFIGURATION DataplaneFeatures = 3
)

var DataplaneFeatures_name = map[int32]string{
	0: "UNKNOWN",
	1: "WATCH_SERVERS",
	2: "EDGE_CERTIFICATE_MANAGEMENT",
	3: "ENVOY_BOOTSTRAP_CONFIGURATION",
}

var DataplaneFeatures_value = map[string]int32{
	"UNKNOWN":                       0,
	"WATCH_SERVERS":                 1,
	"EDGE_CERTIFICATE_MANAGEMENT":   2,
	"ENVOY_BOOTSTRAP_CONFIGURATION": 3,
}

func (x DataplaneFeatures) String() string {
	return proto.EnumName(DataplaneFeatures_name, int32(x))
}

func (DataplaneFeatures) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_593aa94c6c2cf03c, []int{0}
}

type SupportedDataplaneFeaturesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SupportedDataplaneFeaturesRequest) Reset()         { *m = SupportedDataplaneFeaturesRequest{} }
func (m *SupportedDataplaneFeaturesRequest) String() string { return proto.CompactTextString(m) }
func (*SupportedDataplaneFeaturesRequest) ProtoMessage()    {}
func (*SupportedDataplaneFeaturesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_593aa94c6c2cf03c, []int{0}
}
func (m *SupportedDataplaneFeaturesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SupportedDataplaneFeaturesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SupportedDataplaneFeaturesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SupportedDataplaneFeaturesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupportedDataplaneFeaturesRequest.Merge(m, src)
}
func (m *SupportedDataplaneFeaturesRequest) XXX_Size() int {
	return m.Size()
}
func (m *SupportedDataplaneFeaturesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SupportedDataplaneFeaturesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SupportedDataplaneFeaturesRequest proto.InternalMessageInfo

type DataplaneFeatureSupport struct {
	FeatureName          DataplaneFeatures `protobuf:"varint,1,opt,name=feature_name,json=featureName,proto3,enum=dataplane.DataplaneFeatures" json:"feature_name,omitempty"`
	Supported            bool              `protobuf:"varint,2,opt,name=supported,proto3" json:"supported,omitempty"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *DataplaneFeatureSupport) Reset()         { *m = DataplaneFeatureSupport{} }
func (m *DataplaneFeatureSupport) String() string { return proto.CompactTextString(m) }
func (*DataplaneFeatureSupport) ProtoMessage()    {}
func (*DataplaneFeatureSupport) Descriptor() ([]byte, []int) {
	return fileDescriptor_593aa94c6c2cf03c, []int{1}
}
func (m *DataplaneFeatureSupport) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DataplaneFeatureSupport) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DataplaneFeatureSupport.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DataplaneFeatureSupport) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DataplaneFeatureSupport.Merge(m, src)
}
func (m *DataplaneFeatureSupport) XXX_Size() int {
	return m.Size()
}
func (m *DataplaneFeatureSupport) XXX_DiscardUnknown() {
	xxx_messageInfo_DataplaneFeatureSupport.DiscardUnknown(m)
}

var xxx_messageInfo_DataplaneFeatureSupport proto.InternalMessageInfo

func (m *DataplaneFeatureSupport) GetFeatureName() DataplaneFeatures {
	if m != nil {
		return m.FeatureName
	}
	return DataplaneFeatures_UNKNOWN
}

func (m *DataplaneFeatureSupport) GetSupported() bool {
	if m != nil {
		return m.Supported
	}
	return false
}

type SupportedDataplaneFeaturesResponse struct {
	SupportedDataplaneFeatures []*DataplaneFeatureSupport `protobuf:"bytes,1,rep,name=supported_dataplane_features,json=supportedDataplaneFeatures,proto3" json:"supported_dataplane_features,omitempty"`
	XXX_NoUnkeyedLiteral       struct{}                   `json:"-"`
	XXX_unrecognized           []byte                     `json:"-"`
	XXX_sizecache              int32                      `json:"-"`
}

func (m *SupportedDataplaneFeaturesResponse) Reset()         { *m = SupportedDataplaneFeaturesResponse{} }
func (m *SupportedDataplaneFeaturesResponse) String() string { return proto.CompactTextString(m) }
func (*SupportedDataplaneFeaturesResponse) ProtoMessage()    {}
func (*SupportedDataplaneFeaturesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_593aa94c6c2cf03c, []int{2}
}
func (m *SupportedDataplaneFeaturesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SupportedDataplaneFeaturesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SupportedDataplaneFeaturesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SupportedDataplaneFeaturesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SupportedDataplaneFeaturesResponse.Merge(m, src)
}
func (m *SupportedDataplaneFeaturesResponse) XXX_Size() int {
	return m.Size()
}
func (m *SupportedDataplaneFeaturesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SupportedDataplaneFeaturesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SupportedDataplaneFeaturesResponse proto.InternalMessageInfo

func (m *SupportedDataplaneFeaturesResponse) GetSupportedDataplaneFeatures() []*DataplaneFeatureSupport {
	if m != nil {
		return m.SupportedDataplaneFeatures
	}
	return nil
}

func init() {
	proto.RegisterEnum("dataplane.DataplaneFeatures", DataplaneFeatures_name, DataplaneFeatures_value)
	proto.RegisterType((*SupportedDataplaneFeaturesRequest)(nil), "dataplane.SupportedDataplaneFeaturesRequest")
	proto.RegisterType((*DataplaneFeatureSupport)(nil), "dataplane.DataplaneFeatureSupport")
	proto.RegisterType((*SupportedDataplaneFeaturesResponse)(nil), "dataplane.SupportedDataplaneFeaturesResponse")
}

func init() {
	proto.RegisterFile("proto-public/pbdataplane/dataplane.proto", fileDescriptor_593aa94c6c2cf03c)
}

var fileDescriptor_593aa94c6c2cf03c = []byte{
	// 387 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0x41, 0xef, 0xd2, 0x30,
	0x18, 0xc6, 0xe9, 0xff, 0x9f, 0xa8, 0x14, 0x35, 0xa3, 0x17, 0x09, 0xe2, 0x84, 0x79, 0x59, 0x8c,
	0xb0, 0x04, 0xbd, 0x9b, 0x31, 0x3a, 0x5c, 0x0c, 0x9d, 0xe9, 0x06, 0x44, 0x2f, 0xcd, 0x36, 0xaa,
	0x2c, 0x81, 0xad, 0xae, 0x9b, 0x9a, 0xf8, 0x0d, 0xbc, 0x78, 0xf5, 0x23, 0x79, 0xf4, 0x23, 0x18,
	0xfc, 0x22, 0x26, 0x30, 0x86, 0x91, 0x80, 0xde, 0x9a, 0xe7, 0x7d, 0x9f, 0xfe, 0x9e, 0xbe, 0x7d,
	0xa1, 0x2e, 0xb2, 0x34, 0x4f, 0xfb, 0xa2, 0x08, 0xd7, 0x71, 0x64, 0x88, 0x70, 0x19, 0xe4, 0x81,
	0x58, 0x07, 0x09, 0x37, 0xaa, 0xd3, 0x60, 0xd7, 0x82, 0xea, 0x95, 0xa0, 0x3d, 0x82, 0x3d, 0xaf,
	0x10, 0x22, 0xcd, 0x72, 0xbe, 0x1c, 0x1f, 0x54, 0x9b, 0x07, 0x79, 0x91, 0x71, 0x49, 0xf9, 0xfb,
	0x82, 0xcb, 0x5c, 0xfb, 0x04, 0xef, 0xfd, 0x5d, 0x2b, 0x4d, 0xe8, 0x39, 0xbc, 0xfd, 0x76, 0xaf,
	0xb0, 0x24, 0xd8, 0xf0, 0x16, 0xe8, 0x02, 0xfd, 0xee, 0xb0, 0x33, 0x38, 0x22, 0x4f, 0x6f, 0x6d,
	0x94, 0x0e, 0x12, 0x6c, 0x38, 0xea, 0xc0, 0xba, 0x3c, 0x04, 0x68, 0x5d, 0x75, 0x81, 0x7e, 0x8b,
	0x1e, 0x05, 0xed, 0x0b, 0x80, 0xda, 0xa5, 0x7c, 0x52, 0xa4, 0x89, 0xe4, 0x68, 0x09, 0x3b, 0x95,
	0x87, 0x55, 0x68, 0x56, 0x72, 0x64, 0x0b, 0x74, 0xaf, 0xf5, 0xc6, 0x50, 0xbb, 0x90, 0xaa, 0x84,
	0xd0, 0xb6, 0x3c, 0x4b, 0x7b, 0xfc, 0x11, 0x36, 0x4f, 0x44, 0xd4, 0x80, 0x37, 0x67, 0xe4, 0x25,
	0x71, 0x17, 0x44, 0xa9, 0xa1, 0x26, 0xbc, 0xb3, 0x30, 0x7d, 0xeb, 0x05, 0xf3, 0x30, 0x9d, 0x63,
	0xea, 0x29, 0x00, 0x3d, 0x84, 0xf7, 0xf1, 0x78, 0x82, 0x99, 0x85, 0xa9, 0xef, 0xd8, 0x8e, 0x65,
	0xfa, 0x98, 0x4d, 0x4d, 0x62, 0x4e, 0xf0, 0x14, 0x13, 0x5f, 0xb9, 0x42, 0x3d, 0xf8, 0x00, 0x93,
	0xb9, 0xfb, 0x9a, 0x8d, 0x5c, 0xd7, 0xf7, 0x7c, 0x6a, 0xbe, 0x62, 0x96, 0x4b, 0x6c, 0x67, 0x32,
	0xa3, 0xa6, 0xef, 0xb8, 0x44, 0xb9, 0x1e, 0x7e, 0x05, 0x50, 0xa9, 0xc8, 0x1e, 0xcf, 0x3e, 0xc4,
	0x11, 0x47, 0x9f, 0x61, 0xfb, 0xfc, 0x64, 0xd0, 0x93, 0x3f, 0xde, 0xfa, 0xcf, 0x0f, 0x6e, 0xf7,
	0xff, 0xb3, 0x7b, 0x3f, 0x6e, 0xad, 0x36, 0xb2, 0xbf, 0x6f, 0x55, 0xf0, 0x63, 0xab, 0x82, 0x9f,
	0x5b, 0x15, 0x7c, 0xfb, 0xa5, 0xd6, 0xde, 0x3c, 0x7b, 0x17, 0xe7, 0xab, 0x22, 0x1c, 0x44, 0xe9,
	0xc6, 0x58, 0x05, 0x72, 0x15, 0x47, 0x69, 0x26, 0x8c, 0x28, 0x4d, 0x64, 0xb1, 0x36, 0xce, 0x6d,
	0x66, 0x78, 0x63, 0x57, 0x79, 0xfa, 0x3b, 0x00, 0x00, 0xff, 0xff, 0xbc, 0xbc, 0x12, 0xf6, 0xbc,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DataplaneServiceClient is the client API for DataplaneService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DataplaneServiceClient interface {
	SupportedDataplaneFeatures(ctx context.Context, in *SupportedDataplaneFeaturesRequest, opts ...grpc.CallOption) (*SupportedDataplaneFeaturesResponse, error)
}

type dataplaneServiceClient struct {
	cc *grpc.ClientConn
}

func NewDataplaneServiceClient(cc *grpc.ClientConn) DataplaneServiceClient {
	return &dataplaneServiceClient{cc}
}

func (c *dataplaneServiceClient) SupportedDataplaneFeatures(ctx context.Context, in *SupportedDataplaneFeaturesRequest, opts ...grpc.CallOption) (*SupportedDataplaneFeaturesResponse, error) {
	out := new(SupportedDataplaneFeaturesResponse)
	err := c.cc.Invoke(ctx, "/dataplane.DataplaneService/SupportedDataplaneFeatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataplaneServiceServer is the server API for DataplaneService service.
type DataplaneServiceServer interface {
	SupportedDataplaneFeatures(context.Context, *SupportedDataplaneFeaturesRequest) (*SupportedDataplaneFeaturesResponse, error)
}

// UnimplementedDataplaneServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDataplaneServiceServer struct {
}

func (*UnimplementedDataplaneServiceServer) SupportedDataplaneFeatures(ctx context.Context, req *SupportedDataplaneFeaturesRequest) (*SupportedDataplaneFeaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupportedDataplaneFeatures not implemented")
}

func RegisterDataplaneServiceServer(s *grpc.Server, srv DataplaneServiceServer) {
	s.RegisterService(&_DataplaneService_serviceDesc, srv)
}

func _DataplaneService_SupportedDataplaneFeatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupportedDataplaneFeaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataplaneServiceServer).SupportedDataplaneFeatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataplane.DataplaneService/SupportedDataplaneFeatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataplaneServiceServer).SupportedDataplaneFeatures(ctx, req.(*SupportedDataplaneFeaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DataplaneService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dataplane.DataplaneService",
	HandlerType: (*DataplaneServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SupportedDataplaneFeatures",
			Handler:    _DataplaneService_SupportedDataplaneFeatures_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto-public/pbdataplane/dataplane.proto",
}

func (m *SupportedDataplaneFeaturesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SupportedDataplaneFeaturesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SupportedDataplaneFeaturesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *DataplaneFeatureSupport) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DataplaneFeatureSupport) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DataplaneFeatureSupport) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Supported {
		i--
		if m.Supported {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.FeatureName != 0 {
		i = encodeVarintDataplane(dAtA, i, uint64(m.FeatureName))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SupportedDataplaneFeaturesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SupportedDataplaneFeaturesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SupportedDataplaneFeaturesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.SupportedDataplaneFeatures) > 0 {
		for iNdEx := len(m.SupportedDataplaneFeatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SupportedDataplaneFeatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintDataplane(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintDataplane(dAtA []byte, offset int, v uint64) int {
	offset -= sovDataplane(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SupportedDataplaneFeaturesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DataplaneFeatureSupport) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FeatureName != 0 {
		n += 1 + sovDataplane(uint64(m.FeatureName))
	}
	if m.Supported {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SupportedDataplaneFeaturesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SupportedDataplaneFeatures) > 0 {
		for _, e := range m.SupportedDataplaneFeatures {
			l = e.Size()
			n += 1 + l + sovDataplane(uint64(l))
		}
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovDataplane(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDataplane(x uint64) (n int) {
	return sovDataplane(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SupportedDataplaneFeaturesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataplane
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SupportedDataplaneFeaturesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SupportedDataplaneFeaturesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipDataplane(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataplane
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DataplaneFeatureSupport) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataplane
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DataplaneFeatureSupport: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DataplaneFeatureSupport: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FeatureName", wireType)
			}
			m.FeatureName = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FeatureName |= DataplaneFeatures(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Supported", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Supported = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipDataplane(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataplane
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SupportedDataplaneFeaturesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDataplane
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SupportedDataplaneFeaturesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SupportedDataplaneFeaturesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SupportedDataplaneFeatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthDataplane
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthDataplane
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SupportedDataplaneFeatures = append(m.SupportedDataplaneFeatures, &DataplaneFeatureSupport{})
			if err := m.SupportedDataplaneFeatures[len(m.SupportedDataplaneFeatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDataplane(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDataplane
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDataplane(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDataplane
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDataplane
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDataplane
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDataplane
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDataplane
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDataplane        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDataplane          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDataplane = fmt.Errorf("proto: unexpected end of group")
)
